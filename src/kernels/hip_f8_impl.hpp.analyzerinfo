<?xml version="1.0"?>
<analyzerinfo hash="16105931407373652883">
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="305" column="18"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="307" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="308" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="309" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="305" column="18"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="307" column="15"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="308" column="19"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const unsigned int * and const float * which have an incompatible binary data representation." verbose="Casting between const unsigned int * and const float * which have an incompatible binary data representation." cwe="704" file0="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp">
            <location file="/workspaces/MIOpen/src/kernels/hip_f8_impl.hpp" line="309" column="19"/>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functioncall functionName="T"/>
    <functioncall functionName="X"/>
    <functioncall functionName="Y"/>
    <functioncall functionName="__builtin_clz"/>
    <functioncall functionName="__is_same_as"/>
    <functioncall functionName="_x"/>
    <functioncall functionName="act_exponent"/>
    <functioncall functionName="bias"/>
    <functioncall functionName="bool"/>
    <functioncall functionName="cast_to_f8_no_range_reduce"/>
    <functioncall functionName="class"/>
    <functioncall functionName="clip"/>
    <functioncall functionName="const"/>
    <functioncall functionName="drop_mask"/>
    <functioncall functionName="exponent"/>
    <functioncall functionName="exponent_diff"/>
    <functioncall functionName="f8_bias"/>
    <functioncall functionName="f8_exponent"/>
    <functioncall functionName="fInf"/>
    <functioncall functionName="fNaN"/>
    <functioncall functionName="fNegInf"/>
    <functioncall functionName="false"/>
    <functioncall functionName="float"/>
    <functioncall functionName="half"/>
    <functioncall functionName="if"/>
    <functioncall functionName="ifInf"/>
    <functioncall functionName="ifNaN"/>
    <functioncall functionName="ifNeg0"/>
    <functioncall functionName="ifNegInf"/>
    <functioncall functionName="ihInf"/>
    <functioncall functionName="ihNaN"/>
    <functioncall functionName="ihNeg0"/>
    <functioncall functionName="ihNegInf"/>
    <functioncall functionName="int"/>
    <functioncall functionName="is_float"/>
    <functioncall functionName="is_half"/>
    <functioncall functionName="mantissa"/>
    <functioncall functionName="max_exp"/>
    <functioncall functionName="negative_zero_nan"/>
    <functioncall functionName="predicate"/>
    <functioncall functionName="reinterpret_cast"/>
    <functioncall functionName="remove_cv"/>
    <functioncall functionName="return"/>
    <functioncall functionName="retval"/>
    <functioncall functionName="rng"/>
    <functioncall functionName="sh"/>
    <functioncall functionName="short"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="static_assert"/>
    <functioncall functionName="static_cast"/>
    <functioncall functionName="stoch"/>
    <functioncall functionName="true"/>
    <functioncall functionName="typename"/>
    <functioncall functionName="uint16_t"/>
    <functioncall functionName="uint32_t"/>
    <functioncall functionName="volatile"/>
    <functioncall functionName="wm"/>
  </FileInfo>
</analyzerinfo>
